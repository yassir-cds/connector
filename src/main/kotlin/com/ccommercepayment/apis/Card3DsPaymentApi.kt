/**
* Payment Gateway
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* The version of the OpenAPI document: v1
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package com.ccommercepayment.apis

import com.ccommercepayment.models.Card3DsAuthorizeWithAuthDataRequest
import com.ccommercepayment.models.Card3DsCheckEnrollmentRequest
import com.ccommercepayment.models.Card3DsCheckEnrollmentResponse
import com.ccommercepayment.models.Card3DsValidateAuthenticationAndAuthorizeRequest
import com.ccommercepayment.models.Card3DsValidateAuthenticationRequest
import com.ccommercepayment.models.Card3DsValidateAuthenticationResponse
import com.ccommercepayment.models.CardPaymentResponse

import com.ccommercepayment.infrastructure.ApiClient
import com.ccommercepayment.infrastructure.ClientException
import com.ccommercepayment.infrastructure.ClientError
import com.ccommercepayment.infrastructure.ServerException
import com.ccommercepayment.infrastructure.ServerError
import com.ccommercepayment.infrastructure.MultiValueMap
import com.ccommercepayment.infrastructure.RequestConfig
import com.ccommercepayment.infrastructure.RequestMethod
import com.ccommercepayment.infrastructure.ResponseType
import com.ccommercepayment.infrastructure.Success
import com.ccommercepayment.infrastructure.toMultiValue

class Card3DsPaymentApi(basePath: kotlin.String = "http://localhost") : ApiClient(basePath) {

    /**
    * Validate authentication.
    * To process a payment authorization linked to this authentication, you should pass all authentication data.
    * @param authToken Gets or sets the authentication token. 
    * @param card3DsValidateAuthenticationRequest The validate authentication request. (optional)
    * @return Card3DsValidateAuthenticationResponse
    */
    @Suppress("UNCHECKED_CAST")
    fun v1PaymentsCard3dsPaymentAuthenticationPost(authToken: kotlin.String, card3DsValidateAuthenticationRequest: Card3DsValidateAuthenticationRequest?) : Card3DsValidateAuthenticationResponse {
        val localVariableBody: kotlin.Any? = card3DsValidateAuthenticationRequest
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("authToken" to authToken.toString())
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/v1/payments/card3ds-payment/authentication",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<Card3DsValidateAuthenticationResponse>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Card3DsValidateAuthenticationResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Check enrollment
    * 
    * @param authToken Gets or sets the authentication token. 
    * @param card3DsCheckEnrollmentRequest All data needed to make a 3DS card payment (optional)
    * @return Card3DsCheckEnrollmentResponse
    */
    @Suppress("UNCHECKED_CAST")
    fun v1PaymentsCard3dsPaymentPost(authToken: kotlin.String, card3DsCheckEnrollmentRequest: Card3DsCheckEnrollmentRequest?) : Card3DsCheckEnrollmentResponse {
        val localVariableBody: kotlin.Any? = card3DsCheckEnrollmentRequest
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("authToken" to authToken.toString())
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/v1/payments/card3ds-payment",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<Card3DsCheckEnrollmentResponse>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Card3DsCheckEnrollmentResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Validate authentication AND authorize / payment
    * Finish the 3DS payment.  Reuse the order references and the paymentRequestId (returned from the POST).
    * @param authToken Gets or sets the authentication token. 
    * @param card3DsValidateAndAuthorizeRequest The card payment put request. (optional)
    * @return CardPaymentResponse
    */
    @Suppress("UNCHECKED_CAST")
    fun v1PaymentsCard3dsPaymentPut(authToken: kotlin.String, card3DsValidateAndAuthorizeRequest: Card3DsValidateAuthenticationAndAuthorizeRequest?) : CardPaymentResponse {
        val localVariableBody: kotlin.Any? = card3DsValidateAndAuthorizeRequest
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("authToken" to authToken.toString())
        val localVariableConfig = RequestConfig(
            RequestMethod.PUT,
            "/v1/payments/card3ds-payment",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<CardPaymentResponse>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as CardPaymentResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Authorization / payment -with- authentication data
    * You should pass authentication data returned by the authentication API.
    * @param authToken Gets or sets the authentication token. 
    * @param card3DsAuthorizeWithAuthDataRequest The authorize with authentication data request. (optional)
    * @return CardPaymentResponse
    */
    @Suppress("UNCHECKED_CAST")
    fun v1PaymentsCard3dsPaymentWithAuthenticationDataPost(authToken: kotlin.String, card3DsAuthorizeWithAuthDataRequest: Card3DsAuthorizeWithAuthDataRequest?) : CardPaymentResponse {
        val localVariableBody: kotlin.Any? = card3DsAuthorizeWithAuthDataRequest
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("authToken" to authToken.toString())
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/v1/payments/card3ds-payment/with-authentication-data",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<CardPaymentResponse>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as CardPaymentResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

}
