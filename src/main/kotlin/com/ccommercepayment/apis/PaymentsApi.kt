/**
* Payment Gateway
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* The version of the OpenAPI document: v1
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package com.ccommercepayment.apis

import com.ccommercepayment.models.PaymentOperationsRequest
import com.ccommercepayment.models.PaymentOperationsResponse

import com.ccommercepayment.infrastructure.ApiClient
import com.ccommercepayment.infrastructure.ClientException
import com.ccommercepayment.infrastructure.ClientError
import com.ccommercepayment.infrastructure.ServerException
import com.ccommercepayment.infrastructure.ServerError
import com.ccommercepayment.infrastructure.MultiValueMap
import com.ccommercepayment.infrastructure.RequestConfig
import com.ccommercepayment.infrastructure.RequestMethod
import com.ccommercepayment.infrastructure.ResponseType
import com.ccommercepayment.infrastructure.Success
import com.ccommercepayment.infrastructure.toMultiValue

class PaymentsApi(basePath: kotlin.String = "http://localhost") : ApiClient(basePath) {

    /**
    * Gets all payment schedules
    * 
    * @param orderRef The order reference. 
    * @param merchantId The merchant identifier. 
    * @param merchantSiteId The merchant site identifier. 
    * @param authToken Gets or sets the authentication token. 
    * @return PaymentOperationsResponse
    */
    @Suppress("UNCHECKED_CAST")
    fun v1PaymentsAllByOrderRefMerchantsByMerchantIdSitesByMerchantSiteIdGet(orderRef: kotlin.String, merchantId: kotlin.Int, merchantSiteId: kotlin.String, authToken: kotlin.String) : PaymentOperationsResponse {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("authToken" to authToken.toString())
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/v1/payments/all/{orderRef}/merchants/{merchantId}/sites/{merchantSiteId}".replace("{"+"orderRef"+"}", "$orderRef").replace("{"+"merchantId"+"}", "$merchantId").replace("{"+"merchantSiteId"+"}", "$merchantSiteId"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<PaymentOperationsResponse>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as PaymentOperationsResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Gets payment schedule by tag.
    * 
    * @param orderRef The order reference. 
    * @param merchantId The merchant identifier. 
    * @param merchantSiteId The merchant site identifier. 
    * @param orderTag The order Tag 
    * @param authToken Gets or sets the authentication token. 
    * @return PaymentOperationsResponse
    */
    @Suppress("UNCHECKED_CAST")
    fun v1PaymentsByOrderRefMerchantsByMerchantIdSitesByMerchantSiteIdByOrderTagGet(orderRef: kotlin.String, merchantId: kotlin.Int, merchantSiteId: kotlin.String, orderTag: kotlin.String, authToken: kotlin.String) : PaymentOperationsResponse {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("authToken" to authToken.toString())
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/v1/payments/{orderRef}/merchants/{merchantId}/sites/{merchantSiteId}/{orderTag}".replace("{"+"orderRef"+"}", "$orderRef").replace("{"+"merchantId"+"}", "$merchantId").replace("{"+"merchantSiteId"+"}", "$merchantSiteId").replace("{"+"orderTag"+"}", "$orderTag"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<PaymentOperationsResponse>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as PaymentOperationsResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Gets payment schedule
    * 
    * @param orderRef The order reference. 
    * @param merchantId The merchant identifier. 
    * @param merchantSiteId The merchant site identifier. 
    * @param authToken Gets or sets the authentication token. 
    * @return PaymentOperationsResponse
    */
    @Suppress("UNCHECKED_CAST")
    fun v1PaymentsByOrderRefMerchantsByMerchantIdSitesByMerchantSiteIdGet(orderRef: kotlin.String, merchantId: kotlin.Int, merchantSiteId: kotlin.String, authToken: kotlin.String) : PaymentOperationsResponse {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("authToken" to authToken.toString())
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/v1/payments/{orderRef}/merchants/{merchantId}/sites/{merchantSiteId}".replace("{"+"orderRef"+"}", "$orderRef").replace("{"+"merchantId"+"}", "$merchantId").replace("{"+"merchantSiteId"+"}", "$merchantSiteId"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<PaymentOperationsResponse>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as PaymentOperationsResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Cancel or refund
    * This operation allows the merchant to cancel (also referred to as \&quot;void\&quot;) or refund a transaction, according to its current state.    You can find below the exhaustive list of cases which may happen.      With a Cancel operation, the customer will not see movement on his bank account, contrary to Refund which gives back the charged amount.    Cancel is only performed when:    1. The transaction is not yet captured (in which case, the fund reservation on the customer payment method is cleared)    2. The operation occurs on the same day as the capture operation.        If you want to cancel or refund less than the original transaction amount, you can specify the amount in the request body.   Alternatively you can specify an amount of 0 (or not specify the amount in the request) if you want to refund the total amount.    * Partial operation: 0 &amp;lt; amount &amp;lt; transaction amount    * Full operation: amount &#x3D;&#x3D; transaction amount OR amount &#x3D;&#x3D; 0      ---      ## Cancel Or Refund cases ##     **After the authorization, and before the capture**     Because the refund operation cannot be executed on a non-captured transaction, only the cancel operation is supported    | Partial Operation                                                               | Full Operation                                                                                                                                      |  | ------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------- |  | No interaction with partners because partial cancel/void is **not supported**. &lt;br /&gt; The only impact is an update of the remaining amount to capture in payment hub. | **Cancel** operation will be executed on the entire transaction. &lt;br /&gt; The fund reservation on the customer payment method will be cleared, and capture will no longer be possible.&lt;br /&gt; Cancelling a non captured transaction is **not worldwide supported**, and depends on the payment partner (PSP), the acquiring bank, and the issuing bank. |    **After the capture**     Because the balance is made at midnight, either the cancel operation or the refund operation will be selected depending on the date.       |                                          | Partial Operation                                                                                                             | Full Operation                                            |  | ---------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------- |  | On the same day as the capture operation | The **cancel** operation will be executed. &lt;br /&gt; Partial cancelling of a captured transaction is supported, but doesn&#39;t behave the same depending on the payment partner used. &lt;br /&gt; In some cases, a **refund** will be executed instead. | The **cancel** operation will be executed. &lt;br /&gt; Full cancel of a captured transaction is **fully supported**. |  | D+1 and later                            | The **refund** operation will be executed. &lt;br /&gt; Partial refund is **fully supported**. | The **refund** operation will be executed. &lt;br /&gt; Full refund is **fully supported**. |
    * @param orderRef The OrderRef. 
    * @param authToken Gets or sets the authentication token. 
    * @param paymentOperationRequest The payment operation request. Materialized by the Body of the PUT request (optional)
    * @return PaymentOperationsResponse
    */
    @Suppress("UNCHECKED_CAST")
    fun v1PaymentsByOrderRefOperationsCancelOrRefundPut(orderRef: kotlin.String, authToken: kotlin.String, paymentOperationRequest: PaymentOperationsRequest?) : PaymentOperationsResponse {
        val localVariableBody: kotlin.Any? = paymentOperationRequest
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("authToken" to authToken.toString())
        val localVariableConfig = RequestConfig(
            RequestMethod.PUT,
            "/v1/payments/{orderRef}/operations/cancelOrRefund".replace("{"+"orderRef"+"}", "$orderRef"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<PaymentOperationsResponse>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as PaymentOperationsResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Capture
    * This operation charges the bank account of the customer, following a valid authorization done before. You need to provide a succeeded authorized OrderRef, and the amount you want to charge.  This is well suited for a \&quot;charge at shipping\&quot; scenario: the merchant makes an authorization when the customer place the order, and the bank account is charged when the merchant actually does the shipping.    - If you want to capture the total amount of the authorization, you can either set the amount to 0 in the request, or simply not specify it.    ### Useful reminders:    * You can capture the authorization multiple times, as long as there is some amount remaining. For instance, with an authorization of 100€, you can capture 20€ and then capture 80€ later, within the limited time.    * Please note that the authorization is only valid for a limited amount of time, and that you cannot capture a greater amount than the authorized one.
    * @param orderRef The OrderRef. 
    * @param authToken Gets or sets the authentication token. 
    * @param paymentOperationRequest The payment operation request. Materialized by the Body of the PUT request (optional)
    * @return PaymentOperationsResponse
    */
    @Suppress("UNCHECKED_CAST")
    fun v1PaymentsByOrderRefOperationsCapturePut(orderRef: kotlin.String, authToken: kotlin.String, paymentOperationRequest: PaymentOperationsRequest?) : PaymentOperationsResponse {
        val localVariableBody: kotlin.Any? = paymentOperationRequest
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("authToken" to authToken.toString())
        val localVariableConfig = RequestConfig(
            RequestMethod.PUT,
            "/v1/payments/{orderRef}/operations/capture".replace("{"+"orderRef"+"}", "$orderRef"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<PaymentOperationsResponse>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as PaymentOperationsResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Recompute schedule
    * This operation forces the recomputation of the payment schedule, using the default payment schedule rules.
    * @param orderRef The OrderRef. 
    * @param authToken Gets or sets the authentication token. 
    * @param paymentOperationRequest The payment operation request. Materialized by the Body of the PUT request (optional)
    * @return PaymentOperationsResponse
    */
    @Suppress("UNCHECKED_CAST")
    fun v1PaymentsByOrderRefOperationsRecomputePut(orderRef: kotlin.String, authToken: kotlin.String, paymentOperationRequest: PaymentOperationsRequest?) : PaymentOperationsResponse {
        val localVariableBody: kotlin.Any? = paymentOperationRequest
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("authToken" to authToken.toString())
        val localVariableConfig = RequestConfig(
            RequestMethod.PUT,
            "/v1/payments/{orderRef}/operations/recompute".replace("{"+"orderRef"+"}", "$orderRef"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<PaymentOperationsResponse>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as PaymentOperationsResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

}
